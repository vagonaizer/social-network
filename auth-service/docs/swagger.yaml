definitions:
  dto.AssignRoleRequest:
    properties:
      role:
        enum:
        - user
        - moderator
        - admin
        type: string
    required:
    - role
    type: object
  dto.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      path:
        type: string
      timestamp:
        type: string
    type: object
  dto.GetUserRolesResponse:
    properties:
      roles:
        items:
          $ref: '#/definitions/dto.UserRoleResponse'
        type: array
    type: object
  dto.InitiatePasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      tokens:
        $ref: '#/definitions/dto.TokenResponse'
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      display_name:
        maxLength: 100
        minLength: 1
        type: string
      email:
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - display_name
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        maxLength: 128
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_verified:
        type: boolean
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserRoleResponse:
    properties:
      granted_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        type: string
      user_id:
        type: string
    type: object
  dto.ValidateTokenResponse:
    properties:
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/dto.UserResponse'
      valid:
        type: boolean
    type: object
  dto.VerifyEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
info:
  contact: {}
paths:
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Current and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and revoke refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/me:
    get:
      description: Get current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.InitiatePasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Initiate password reset
      tags:
      - auth
  /auth/reset-password/confirm:
    post:
      consumes:
      - application/json
      description: Reset user password using reset token
      parameters:
      - description: Reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset password
      tags:
      - auth
  /auth/users/{user_id}/roles:
    get:
      description: Get all roles assigned to a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Assign a role to a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role to assign
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - admin
  /auth/users/{user_id}/roles/{role}:
    delete:
      description: Revoke a role from a user (admin only)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role to revoke
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke role from user
      tags:
      - admin
  /auth/validate:
    get:
      description: Validate access token and return user info (internal use)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ValidateTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate access token
      tags:
      - auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user's email address using verification token
      parameters:
      - description: Verification token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Verify email address
      tags:
      - auth
swagger: "2.0"
